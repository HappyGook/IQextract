stages:
  - install
  - build
  - test
  - deploy

variables:
  NODE_ENV: test # Example environment variable

# Install dependencies
install:
  stage: install
  image: node:18
  script:
    - echo "Checking directory structure during install stage:"
    - ls -R # Debugging step
    - cd frontend # Navigate to the frontend directory
    - npm ci # Clean install dependencies
    - cd ../backend # Navigate to the backend directory
    - go mod download # Install Go dependencies
  cache:
    key: node-modules-cache
    paths:
      - frontend/node_modules/ # Cache node_modules
      - backend/pkg/mod/ # Cache Go modules

# Build the project
build:
  stage: build
  image: node:18
  script:
    - echo "Checking directory structure during build stage:"
    - ls -R # Debugging step
    - cd frontend
    - npm run build # Build React app
    - cd ../backend
    - go build -o app # Build Go backend
  artifacts:
    paths:
      - frontend/build/ # React build output
      - backend/app # Go binary

# Test the project
test:
  stage: test
  image: node:18
  script:
    - echo "Running React unit tests"
    - cd frontend
    - npm run test # Run React tests
    - cd ../backend
    - echo "Running Go unit tests"
    - go test ./... # Run Go unit tests

# End-to-End Testing with Playwright
e2e-tests:
  stage: test
  image: mcr.microsoft.com/playwright:v1.37.0-focal # Playwright testing image
  script:
    - cd frontend
    - npm run test:e2e # Run Playwright tests
  dependencies:
    - build # Ensure the app is built before testing

# Deploy the application
deploy:
  stage: deploy
  image: node:18
  script:
    - echo "Starting both React and Go apps"
    - cd frontend
    - npm run start-all # Start both React and Go apps
  only:
    - main # Only deploy on the main branch
