stages:
  - install
  - build
  - test
  - deploy

variables:
  NODE_ENV: test # Example environment variable
  GO_VERSION: 1.23.3 # Define the Go version to install

# Install dependencies
install:
  stage: install
  image: node:18
  script:
    # Install Go
    - echo "Installing Go ${GO_VERSION}..."
    - curl -OL https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz
    - tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
    - export PATH=$PATH:/usr/local/go/bin
    - go version # Verify Go installation

    # Install Frontend Dependencies
    - echo "Installing frontend dependencies..."
    - cd frontend
    - npm install # Clean install dependencies
    - npm list react-scripts 
    - cd ../backend

    # Install Backend Dependencies
    - echo "Installing backend dependencies..."
    - go mod download # Install Go dependencies
  cache:
    key: node-modules-cache
    paths:
      - frontend/node_modules/ # Cache node_modules
      - backend/pkg/mod/ # Cache Go modules

# Build the project
build:
  stage: build
  image: node:18
  script:
    # Set up Go again
    - echo "Installing Go ${GO_VERSION} in build stage..."
    - curl -OL https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz
    - tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
    - export PATH=$PATH:/usr/local/go/bin
    - go version # Verify Go installation


    # Build Frontend
    - echo "Building frontend..."
    - cd frontend
    - npm install 
    - npm run build
    - cd ../backend

    # Build Backend
    - echo "Building backend..."
    - go build -o app # Build Go binary
  artifacts:
    paths:
      - frontend/build/ # React build output
      - backend/app # Go binary

# Test the project
test:
  stage: test
  image: node:18
  script:
    # Set up Go again
    - echo "Installing Go ${GO_VERSION} in test stage..."
    - curl -OL https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz
    - tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
    - export PATH=$PATH:/usr/local/go/bin
    - go version # Verify Go installation

    # Run Frontend Tests
    - echo "Running frontend unit tests..."
    - cd frontend
    - npm run test
    - cd ../backend

    # Run Backend Tests
    - echo "Running backend unit tests..."
    - go test ./...

# End-to-End Testing with Playwright
e2e-tests:
  stage: test
  image: mcr.microsoft.com/playwright:v1.37.0-focal # Playwright testing image
  script:
    - cd frontend
    - npm run test:e2e # Run Playwright tests
  dependencies:
    - build # Ensure the app is built before testing

# Deploy the application
deploy:
  stage: deploy
  image: node:18
  script:
    # Set up Go again
    - echo "Installing Go ${GO_VERSION} in deploy stage..."
    - curl -OL https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz
    - tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
    - export PATH=$PATH:/usr/local/go/bin
    - go version # Verify Go installation

    # Start the application
    - echo "Starting both React and Go apps"
    - cd frontend
    - npm run start-all
  only:
    - main # Only deploy on the main branch
